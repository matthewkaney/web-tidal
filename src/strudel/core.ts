import * as strudelCore from "@strudel/core";

export const core = {
  Cyclist: { type: "", value: strudelCore.Cyclist },
  Drawer: { type: "", value: strudelCore.Drawer },
  Fraction: { type: "", value: strudelCore.Fraction },
  Framer: { type: "", value: strudelCore.Framer },
  Hap: { type: "", value: strudelCore.Hap },
  Pattern: { type: "", value: strudelCore.Pattern },
  State: { type: "", value: strudelCore.State },
  TimeSpan: { type: "", value: strudelCore.TimeSpan },
  __chooseWith: { type: "", value: strudelCore.__chooseWith },
  _brandBy: { type: "", value: strudelCore._brandBy },
  _irand: { type: "", value: strudelCore._irand },
  _mod: { type: "", value: strudelCore._mod },
  add: { type: "", value: strudelCore.add },
  almostAlways: { type: "", value: strudelCore.almostAlways },
  almostNever: { type: "", value: strudelCore.almostNever },
  always: { type: "", value: strudelCore.always },
  and: { type: "", value: strudelCore.and },
  angle: { type: "", value: strudelCore.angle },
  apply: { type: "", value: strudelCore.apply },
  arrange: { type: "", value: strudelCore.arrange },
  backgroundImage: { type: "", value: strudelCore.backgroundImage },
  band: { type: "", value: strudelCore.band },
  base64ToUnicode: { type: "", value: strudelCore.base64ToUnicode },
  bjork: { type: "", value: strudelCore.bjork },
  blshift: { type: "", value: strudelCore.blshift },
  bor: { type: "", value: strudelCore.bor },
  brak: { type: "", value: strudelCore.brak },
  brand: { type: "", value: strudelCore.brand },
  brandBy: { type: "", value: strudelCore.brandBy },
  brshift: { type: "", value: strudelCore.brshift },
  bxor: { type: "", value: strudelCore.bxor },
  bypass: { type: "", value: strudelCore.bypass },
  cat: { type: "", value: strudelCore.cat },
  ceil: { type: "", value: strudelCore.ceil },
  choose: { type: "", value: strudelCore.choose },
  chooseCycles: { type: "", value: strudelCore.chooseCycles },
  chooseInWith: { type: "", value: strudelCore.chooseInWith },
  chooseWith: { type: "", value: strudelCore.chooseWith },
  chop: { type: "", value: strudelCore.chop },
  chunkBack: { type: "", value: strudelCore.chunkBack },
  chunkback: { type: "", value: strudelCore.chunkback },
  clamp: { type: "", value: strudelCore.clamp },
  cleanupDraw: { type: "", value: strudelCore.cleanupDraw },
  cleanupUi: { type: "", value: strudelCore.cleanupUi },
  code2hash: { type: "", value: strudelCore.code2hash },
  color: { type: "", value: strudelCore.color },
  colour: { type: "", value: strudelCore.colour },
  compose: { type: "", value: strudelCore.compose },
  compress: { type: "", value: strudelCore.compress },
  compressSpan: { type: "", value: strudelCore.compressSpan },
  compressspan: { type: "", value: strudelCore.compressspan },
  constant: { type: "", value: strudelCore.constant },
  controls: { type: "", value: strudelCore.controls },
  cosine: { type: "", value: strudelCore.cosine },
  cosine2: { type: "", value: strudelCore.cosine2 },
  cpm: { type: "", value: strudelCore.cpm },
  curry: { type: "", value: strudelCore.curry },
  degrade: { type: "", value: strudelCore.degrade },
  degradeBy: { type: "", value: strudelCore.degradeBy },
  degradeByWith: { type: "", value: strudelCore.degradeByWith },
  density: { type: "", value: strudelCore.density },
  div: { type: "", value: strudelCore.div },
  drawLine: { type: "", value: strudelCore.drawLine },
  drawPianoroll: { type: "", value: strudelCore.drawPianoroll },
  duration: { type: "", value: strudelCore.duration },
  early: { type: "", value: strudelCore.early },
  echo: { type: "", value: strudelCore.echo },
  echoWith: { type: "", value: strudelCore.echoWith },
  echowith: { type: "", value: strudelCore.echowith },
  eq: { type: "", value: strudelCore.eq },
  eqt: { type: "", value: strudelCore.eqt },
  euclid: { type: "", value: strudelCore.euclid },
  euclidLegato: { type: "", value: strudelCore.euclidLegato },
  euclidLegatoRot: { type: "", value: strudelCore.euclidLegatoRot },
  euclidRot: { type: "", value: strudelCore.euclidRot },
  euclidrot: { type: "", value: strudelCore.euclidrot },
  evalScope: { type: "", value: strudelCore.evalScope },
  evaluate: { type: "", value: strudelCore.evaluate },
  every: { type: "", value: strudelCore.every },
  fast: {
    type: "Pattern Number -> Pattern a -> Pattern a",
    value: strudelCore.fast,
  },
  fastChunk: { type: "", value: strudelCore.fastChunk },
  fastGap: { type: "", value: strudelCore.fastGap },
  fastcat: { type: "", value: strudelCore.fastcat },
  fastchunk: { type: "", value: strudelCore.fastchunk },
  fastgap: { type: "", value: strudelCore.fastgap },
  fill: { type: "", value: strudelCore.fill },
  firstOf: { type: "", value: strudelCore.firstOf },
  fit: { type: "", value: strudelCore.fit },
  flatten: { type: "", value: strudelCore.flatten },
  floor: { type: "", value: strudelCore.floor },
  focus: { type: "", value: strudelCore.focus },
  focusSpan: { type: "", value: strudelCore.focusSpan },
  focusspan: { type: "", value: strudelCore.focusspan },
  fractionalArgs: { type: "", value: strudelCore.fractionalArgs },
  freqToMidi: { type: "", value: strudelCore.freqToMidi },
  fromBipolar: { type: "", value: strudelCore.fromBipolar },
  func: { type: "", value: strudelCore.func },
  getDrawContext: { type: "", value: strudelCore.getDrawContext },
  getDrawOptions: { type: "", value: strudelCore.getDrawOptions },
  getFreq: { type: "", value: strudelCore.getFreq },
  getFrequency: { type: "", value: strudelCore.getFrequency },
  getPlayableNoteValue: { type: "", value: strudelCore.getPlayableNoteValue },
  getPunchcardPainter: { type: "", value: strudelCore.getPunchcardPainter },
  getSoundIndex: { type: "", value: strudelCore.getSoundIndex },
  getTime: { type: "", value: strudelCore.getTime },
  getTrigger: { type: "", value: strudelCore.getTrigger },
  gt: { type: "", value: strudelCore.gt },
  gte: { type: "", value: strudelCore.gte },
  h: { type: "", value: strudelCore.h },
  hash2code: { type: "", value: strudelCore.hash2code },
  hsl: { type: "", value: strudelCore.hsl },
  hsla: { type: "", value: strudelCore.hsla },
  hurry: { type: "", value: strudelCore.hurry },
  id: { type: "", value: strudelCore.id },
  inhabit: { type: "", value: strudelCore.inhabit },
  inhabitmod: { type: "", value: strudelCore.inhabitmod },
  inside: { type: "", value: strudelCore.inside },
  inv: { type: "", value: strudelCore.inv },
  invert: { type: "", value: strudelCore.invert },
  irand: { type: "", value: strudelCore.irand },
  isNote: { type: "", value: strudelCore.isNote },
  isNoteWithOctave: { type: "", value: strudelCore.isNoteWithOctave },
  isPattern: { type: "", value: strudelCore.isPattern },
  isaw: { type: "", value: strudelCore.isaw },
  isaw2: { type: "", value: strudelCore.isaw2 },
  iter: { type: "", value: strudelCore.iter },
  iterBack: { type: "", value: strudelCore.iterBack },
  iterback: { type: "", value: strudelCore.iterback },
  jux: { type: "", value: strudelCore.jux },
  juxBy: { type: "", value: strudelCore.juxBy },
  juxby: { type: "", value: strudelCore.juxby },
  keep: { type: "", value: strudelCore.keep },
  keepif: { type: "", value: strudelCore.keepif },
  lastOf: { type: "", value: strudelCore.lastOf },
  late: { type: "", value: strudelCore.late },
  legato: { type: "", value: strudelCore.legato },
  linger: { type: "", value: strudelCore.linger },
  listRange: { type: "", value: strudelCore.listRange },
  logKey: { type: "", value: strudelCore.logKey },
  logger: { type: "", value: strudelCore.logger },
  loopAt: { type: "", value: strudelCore.loopAt },
  loopAtCps: { type: "", value: strudelCore.loopAtCps },
  loopat: { type: "", value: strudelCore.loopat },
  loopatcps: { type: "", value: strudelCore.loopatcps },
  lt: { type: "", value: strudelCore.lt },
  lte: { type: "", value: strudelCore.lte },
  mapArgs: { type: "", value: strudelCore.mapArgs },
  mask: {
    type: "Pattern Bool -> Pattern a -> Pattern a",
    value: strudelCore.mask,
  },
  midi2note: { type: "", value: strudelCore.midi2note },
  midiToFreq: { type: "", value: strudelCore.midiToFreq },
  mod: { type: "", value: strudelCore.mod },
  moveXY: { type: "", value: strudelCore.moveXY },
  mul: { type: "", value: strudelCore.mul },
  nanFallback: { type: "", value: strudelCore.nanFallback },
  ne: { type: "", value: strudelCore.ne },
  net: { type: "", value: strudelCore.net },
  never: { type: "", value: strudelCore.never },
  noteToMidi: { type: "", value: strudelCore.noteToMidi },
  numeralArgs: { type: "", value: strudelCore.numeralArgs },
  objectMap: { type: "", value: strudelCore.objectMap },
  off: { type: "", value: strudelCore.off },
  often: { type: "", value: strudelCore.often },
  or: { type: "", value: strudelCore.or },
  outside: { type: "", value: strudelCore.outside },
  palindrome: { type: "", value: strudelCore.palindrome },
  parseFractional: { type: "", value: strudelCore.parseFractional },
  parseNumeral: { type: "", value: strudelCore.parseNumeral },
  perlin: { type: "", value: strudelCore.perlin },
  perlinWith: { type: "", value: strudelCore.perlinWith },
  pianoroll: { type: "", value: strudelCore.pianoroll },
  pick: { type: "", value: strudelCore.pick },
  pickF: { type: "", value: strudelCore.pickF },
  pickmod: { type: "", value: strudelCore.pickmod },
  pickmodF: { type: "", value: strudelCore.pickmodF },
  pipe: { type: "", value: strudelCore.pipe },
  ply: { type: "", value: strudelCore.ply },
  pm: { type: "", value: strudelCore.pm },
  polymeter: { type: "", value: strudelCore.polymeter },
  polymeterSteps: { type: "", value: strudelCore.polymeterSteps },
  polyrhythm: { type: "", value: strudelCore.polyrhythm },
  pow: { type: "", value: strudelCore.pow },
  pr: { type: "", value: strudelCore.pr },
  press: { type: "", value: strudelCore.press },
  pressBy: {
    type: "Pattern Number -> Pattern a -> Pattern a",
    value: strudelCore.pressBy,
  },
  pure: { type: "", value: strudelCore.pure },
  r: { type: "", value: strudelCore.r },
  rand: { type: "", value: strudelCore.rand },
  rand2: { type: "", value: strudelCore.rand2 },
  randcat: { type: "", value: strudelCore.randcat },
  range: { type: "", value: strudelCore.range },
  range2: { type: "", value: strudelCore.range2 },
  rangex: { type: "", value: strudelCore.rangex },
  rarely: { type: "", value: strudelCore.rarely },
  ratio: { type: "", value: strudelCore.ratio },
  ref: { type: "", value: strudelCore.ref },
  register: { type: "", value: strudelCore.register },
  reify: { type: "", value: strudelCore.reify },
  removeUndefineds: { type: "", value: strudelCore.removeUndefineds },
  repl: { type: "", value: strudelCore.repl },
  rescale: { type: "", value: strudelCore.rescale },
  rev: { type: "", value: strudelCore.rev },
  ribbon: { type: "", value: strudelCore.ribbon },
  rotate: { type: "", value: strudelCore.rotate },
  round: { type: "", value: strudelCore.round },
  run: { type: "", value: strudelCore.run },
  saw: { type: "", value: strudelCore.saw },
  saw2: { type: "", value: strudelCore.saw2 },
  segment: {
    type: "Pattern Number -> Pattern a -> Pattern a",
    value: strudelCore.segment,
  },
  seq: { type: "", value: strudelCore.seq },
  sequence: { type: "", value: strudelCore.sequence },
  set: { type: "", value: strudelCore.set },
  setStringParser: { type: "", value: strudelCore.setStringParser },
  setTime: { type: "", value: strudelCore.setTime },
  signal: { type: "", value: strudelCore.signal },
  silence: { type: "", value: strudelCore.silence },
  sine: { type: "Pattern Number", value: strudelCore.sine },
  sine2: { type: "Pattern Number", value: strudelCore.sine2 },
  slice: { type: "", value: strudelCore.slice },
  slow: { type: "", value: strudelCore.slow },
  slowcat: { type: "", value: strudelCore.slowcat },
  slowcatPrime: { type: "", value: strudelCore.slowcatPrime },
  smear: { type: "", value: strudelCore.smear },
  sol2note: { type: "", value: strudelCore.sol2note },
  someCycles: { type: "", value: strudelCore.someCycles },
  someCyclesBy: { type: "", value: strudelCore.someCyclesBy },
  sometimes: { type: "", value: strudelCore.sometimes },
  sometimesBy: { type: "", value: strudelCore.sometimesBy },
  sparsity: { type: "", value: strudelCore.sparsity },
  speak: { type: "", value: strudelCore.speak },
  splice: { type: "", value: strudelCore.splice },
  splitAt: { type: "", value: strudelCore.splitAt },
  square: { type: "", value: strudelCore.square },
  square2: { type: "", value: strudelCore.square2 },
  squeeze: { type: "", value: strudelCore.squeeze },
  stack: {
    type: "[Pattern a] -> Pattern a",
    value: (items) => strudelCore.stack(...items),
  },
  steady: { type: "", value: strudelCore.steady },
  striate: { type: "", value: strudelCore.striate },
  struct: { type: "", value: strudelCore.struct },
  stut: { type: "", value: strudelCore.stut },
  stutWith: { type: "", value: strudelCore.stutWith },
  stutwith: { type: "", value: strudelCore.stutwith },
  sub: { type: "", value: strudelCore.sub },
  superimpose: { type: "", value: strudelCore.superimpose },
  time: { type: "", value: strudelCore.time },
  timeCat: { type: "", value: strudelCore.timeCat },
  toBipolar: { type: "", value: strudelCore.toBipolar },
  tokenizeNote: { type: "", value: strudelCore.tokenizeNote },
  tri: { type: "", value: strudelCore.tri },
  tri2: { type: "", value: strudelCore.tri2 },
  undegrade: { type: "", value: strudelCore.undegrade },
  undegradeBy: { type: "", value: strudelCore.undegradeBy },
  unicodeToBase64: { type: "", value: strudelCore.unicodeToBase64 },
  valueToMidi: { type: "", value: strudelCore.valueToMidi },
  velocity: { type: "", value: strudelCore.velocity },
  w: { type: "", value: strudelCore.w },
  wchoose: { type: "", value: strudelCore.wchoose },
  wchooseCycles: { type: "", value: strudelCore.wchooseCycles },
  when: { type: "", value: strudelCore.when },
  x: { type: "", value: strudelCore.x },
  xfade: { type: "", value: strudelCore.xfade },
  y: { type: "", value: strudelCore.y },
  zipWith: { type: "", value: strudelCore.zipWith },
  zoom: { type: "", value: strudelCore.zoom },
  zoomArc: { type: "", value: strudelCore.zoomArc },
  zoomIn: { type: "", value: strudelCore.zoomIn },
  zoomarc: { type: "", value: strudelCore.zoomarc },
};
